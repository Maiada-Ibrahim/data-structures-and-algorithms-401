/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package challenge;

import java.util.ArrayList;
import java.util.List;

public class App {


    public static void main(String[] args) {
//        Node<Integer> root=new Node<Integer>(5);
//        Node<Integer> root1=new Node<Integer>(20);


//        BinaryTree<Integer> pre = new BinaryTree<Integer>(5);
//        pre.getRoot().setLeft(8);
//        pre.getRoot().setRight(6);
//        pre.getRoot().setRight(10);
//        pre.getRoot().setLeft(99);

//-----------------------cc-17--------------------------------------------------
//        BinaryTree binaryTest = new BinaryTree<Integer>(9);
//        binaryTest.getRoot().setLeft(4);
//        binaryTest.getRoot().setRight(6);
//        binaryTest.getRoot().getLeft().setRight(3);

//        System.out.println(binaryTest.breadthFirst());

//---------------------------------------------------------------------------------

//        pre.getRoot().getLeft().setRight(1);
//        System.out.println( pre.getRoot().getValue());
//        System.out.println(pre.getRoot().getRight().getValue());
//        BinarySearchTree binarySearchTree= new BinarySearchTree(3);
//        BinaryTree<Integer> pre = new BinaryTree<Integer>(binarySearchTree);
//        binarySearchTree.Add(2);
//        binarySearchTree.Add(7);
//        binarySearchTree.Add(8);
//System.out.println(binarySearchTree.inOrder(binarySearchTree.getRoot()));
//System.out.println(binarySearchTree.PostOrder(binarySearchTree.getRoot()));
//System.out.println(binarySearchTree.preOrder(binarySearchTree.getRoot()));
//        System.out.println(binarySearchTree.Contains(7));

//        System.out.println(pre.max());
//--------------------------------------------------------------
//        BinarySearchTree binarySearchTree= new BinarySearchTree(3);
//        binarySearchTree.Add(2);
//        binarySearchTree.Add(7);
//        binarySearchTree.Add(7);
//      System.out.println(binarySearchTree.oddSum());

  //-------------------------------------------------
            BinaryTree binaryTree1 = new BinaryTree();
    BinaryTree binaryTree2 = new BinaryTree();

    binaryTree1.setRoot(new Node(10));
    binaryTree1.getRoot().setLeft(new Node(7));
    binaryTree1.getRoot().setRight(new Node(15));
    binaryTree1.getRoot().getLeft().setLeft(new Node(4));
    binaryTree1.getRoot().getLeft().setRight(new Node(9));
    binaryTree1.getRoot().getRight().setRight(new Node(20));
    binaryTree1.getRoot().getRight().setLeft(new Node(50));

    binaryTree2.setRoot(new Node(100));
    binaryTree2.getRoot().setLeft(new Node(70));
    binaryTree2.getRoot().setRight(new Node(150));
    binaryTree2.getRoot().getLeft().setLeft(new Node(40));
    binaryTree2.getRoot().getLeft().setRight(new Node(90));
    binaryTree2.getRoot().getRight().setRight(new Node(200));
    binaryTree2.getRoot().getRight().setLeft(new Node(200));
    binaryTree2.getRoot().getRight().getRight().setRight(new Node(200));

    System.out.println("leaves number 1 " + binaryTree1.getLeafCount(binaryTree1.getRoot()));
    System.out.println("leaves number 2 " + binaryTree1.getLeafCount(binaryTree2.getRoot()));
    System.out.println("compare " + binaryTree1.compareTwoTreesLeaves(binaryTree1, binaryTree2));

    //-----------------------------------------------------------------------------------------------


    }
}