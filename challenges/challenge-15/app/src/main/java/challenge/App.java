/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package challenge;

import java.util.ArrayList;
import java.util.List;

public class App {


    public static void main(String[] args) {
//        Node<Integer> root=new Node<Integer>(5);
//        Node<Integer> root1=new Node<Integer>(20);



//        BinaryTree<Integer> pre = new BinaryTree<Integer>(5);
//        pre.getRoot().setLeft(8);
//        pre.getRoot().setRight(6);
//        pre.getRoot().setRight(10);
//        pre.getRoot().setLeft(99);

//-----------------------cc-17--------------------------------------------------
       BinaryTree binaryTest= new BinaryTree<Integer>(9);
//        binaryTest.getRoot().setLeft(4);
//        binaryTest.getRoot().setRight(6);
//        binaryTest.getRoot().getLeft().setRight(3);

//        System.out.println(binaryTest.breadthFirst());

//---------------------------------------------------------------------------------

//        pre.getRoot().getLeft().setRight(1);
//        System.out.println( pre.getRoot().getValue());
//        System.out.println(pre.getRoot().getRight().getValue());
//        BinarySearchTree binarySearchTree= new BinarySearchTree(3);
//        BinaryTree<Integer> pre = new BinaryTree<Integer>(binarySearchTree);
//        binarySearchTree.Add(2);
//        binarySearchTree.Add(7);
//        binarySearchTree.Add(8);
//System.out.println(binarySearchTree.inOrder(binarySearchTree.getRoot()));
//System.out.println(binarySearchTree.PostOrder(binarySearchTree.getRoot()));
//System.out.println(binarySearchTree.preOrder(binarySearchTree.getRoot()));
//        System.out.println(binarySearchTree.Contains(7));

//        System.out.println(pre.max());
//--------------------------------------------------------------
        List<Integer> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        list.add(5);
        list.add(6);
        list.add(7);
        list.add(8);
        list.add(9);
        list.add(30);
        KAryTree<Integer> kAryTree = new KAryTree<>(list, 3);

//    System.out.println("root " + kArayTree.getRoot().getKey());
//    System.out.println(kArayTree.getRoot().getChild(0).getKey());
//    System.out.println(kArayTree.getRoot().getChild(1).getKey());
//    System.out.println(kArayTree.getRoot().getChild(0).getChild(0).getKey());
//    System.out.println(kArayTree.getRoot().getChild(0).getChild(1).getKey());
//    System.out.println(kArayTree.getRoot().getChild(0).getChild(2).getKey());

        kAryTree.postorder(kAryTree.getRoot());
//        System.out.println(kAryTree);
//        kAryTree.treeFizzBuzz();
//        kAryTree.postorder(kAryTree.getRoot());
    }

    }



